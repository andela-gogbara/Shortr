continue
exit
@user
exit
params
params[:password]
@user && @user.authenticate(params[:password])
login_details
User.all
exit
User.all
flash[:success]
flash[:error]
post :create, user: login_details
exit
User.all
login_details
exit
destroy
subject
exit
user_path(assigns[:new_user])
user_path(assigns[:new_user]
assigns[:new_user]
new_user
post :create, new_user: FactoryGirl.attributes_for(:user)
let(:new_user) { FactoryGirl.attributes_for(:user)}
exit
:user
user
params
post :create, new_user: FactoryGirl.attributes_for(:user)
find("link[active]")
page.choose("Active")
page.choose("Inactive")
find('div.activity').choose('Inactive')
exit
choose('Inactive')
exit
click_link("Dashboard")
signup_helper
login_helper
exit
click_link("EDIT")
click_link(page.all(".collection-item")[0].find("span").text)
subject
click_link("Dashboard")
 login_helper
exit
click_link("EDIT")
click_button("Edit")
click_link("Edit")
exit
click_link("Visit Link")
click_button("VISIT LINK")
click_link("visit-link")
exit
click_link("Visit Link")
click_button("Edit")
click_button("Visit Link")
click_button("VISIT LINK")
 click_button("VISIT LINK")
expect(page).to have_css("#show-link", visible: true)
page.all(".collection")[0].click
expect(page).to have_css(".category-span", visible: true)
page.all(".collection")[0].click
exit
page.all(".collection")
click_button("VISIT LINK")
page.all(".collection")[0].click
exit
create_new_short
exit
text_tag = page.find(".toast-container")
page.find(".toast-container")
page.methods.sort
page
exit
FactoryGirl.create(:link)
exit
FactoryGirl.create(:link)
link
exit
reload!
FactoryGirl.create(:link)
link
user
exit
@link
@link.update_attributes(visit_count: +count)
@link.update_attributes(visit_count: count)
exit
@link
@link.update_attributes(visit_count: count)
@link
exit
@link.save
@link.count += 1
@lin.count += 1
@link
exit
request.location
request.latitude
request.ip
exit
user_agent
get_visit_details
exit
check_active_delete
exit
Link.find_by(short_url: params[:short_url])
params
short_url
exit
@link.active
@link
exit
links_params
@linkd
@linkd.id
exit
continue
request.ip
request.user_agent
request.methods
request.referer
request
request.remote_ip
request.env
user_agent
exit
page.useragent
page.title
page.encoding
page.base
page.content_type
page.base
page.link_with
page.link_with!
page.methods
page.parser
page.image_urls
page.image
page.methods
page.useragent
page.user_agent
page.user_agent_alias
page.user_agent
page.user_agent_alias
page.browser
page.history
page.title
page
exit
agent.title
agent
exit
full_url
short_url
exit
short_url
full_url
current_user
params
link_shortener
exit
visit("/")
visit(link.full_url)
visit(root_url + link.short_url)
root_url
visit("/#{link.short_url}")
link
current_path
exit
@link.full_url
exit
@link
exit
click_button("Make Shortr")
click_link("Make Shortr")
click_button("Make Shortr")
click_button("Make Sho")
click_button("Make Short")
click_button("Make Shortr")
exit
@dd.short_url
flash[:success]
flash[:sucess]
flash
@dd
link_params
exit
@dd
link_params
exit
@dd.id
@dd
exit
@dd
dd
exit
link_shortener
shortened_link
exit
shortened_link
link_shortener
exit
shortened_link
link_shortener
link_shortner
exit
eit
ids
id
short_url
self.short_url
short_url
exit
:full_url
params
exit
link_params
exit
redirect_to root_path
@dd
dd
link_params
short_url
exit
short_url
:short_url
link_params
exit
:short_url
:short_url.value
:short_url
:short-url
short_url
link_params
dd
